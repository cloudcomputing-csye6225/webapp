name: Build AMI

on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  build-ami:
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Variables for Database
        env:
          PORT: ${{ secrets.PORT }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          echo "PORT=$PORT" >> .env
          echo "DB_HOST=$DB_HOST" >> .env
          echo "DB_PORT=$DB_PORT" >> .env
          echo "DB_USER=$DB_USER" >> .env
          echo "DB_PASSWORD=$DB_PASSWORD" >> .env
          echo "DB_DIALECT=$DB_DIALECT" >> .env
          echo "DB_NAME=$DB_NAME" >> .env

      - name: Compress webapp
        run: zip -r webapp.zip .

      - name: Check MySQL Running Status
        run: |
          sudo /etc/init.d/mysql start
          mysql -h 127.0.0.1 --port 3306 -u root -p'${{ secrets.ROOT_DB_PASS }}' -e "CREATE USER '${{ secrets.DB_USER }}'@'localhost' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';"  
          mysql -h 127.0.0.1 --port 3306 -u root -p'${{ secrets.ROOT_DB_PASS }}' -e "GRANT ALL ON *.* TO '${{ secrets.DB_USER }}'@'localhost';"
          mysql -h 127.0.0.1 --port 3306 -u root -p'${{ secrets.ROOT_DB_PASS }}' -e "FLUSH PRIVILEGES;"
          mysql -h 127.0.0.1 --port 3306 -u root -p'${{ secrets.ROOT_DB_PASS }}' -e "CREATE DATABASE ${{ secrets.DB_NAME }};"

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Check Versions and Install Dependencies
        run: |
          pwd
          ls -al
          node -v
          npm -v
          npm install
          ls -al

      - name: Run Integration Tests
        run: npm test

      - name: Set Variables for Packer
        run: |
          touch ./packer/variables.pkrvars.hcl
          echo ami_accessible_users=\"${{ secrets.AMI_ACCESSIBLE_USERS }}\" >> ./packer/variables.pkrvars.hcl
          echo vpc_id=\"${{ secrets.VPC_ID }}\" >> ./packer/variables.pkrvars.hcl
          echo profile=\"${{ vars.PROFILE }}\" >> ./packer/variables.pkrvars.hcl
          echo aws_region=\"${{ vars.AWS_REGION }}\" >> ./packer/variables.pkrvars.hcl
          echo source_ami=\"${{ vars.SOURCE_AMI }}\" >> ./packer/variables.pkrvars.hcl
          echo ssh_username=\"${{ vars.SSH_USERNAME }}\" >> ./packer/variables.pkrvars.hcl
          echo ami_description=\"${{ vars.AMI_DESCRIPTION }}\" >> ./packer/variables.pkrvars.hcl
          echo instance_type=\"${{ vars.INSTANCE_TYPE }}\" >> ./packer/variables.pkrvars.hcl
          echo ami_accessible_regions=\"${{ vars.AMI_ACCESSIBLE_REGIONS }}\" >> ./packer/variables.pkrvars.hcl
          echo device_name=\"${{ vars.DEVICE_NAME }}\" >> ./packer/variables.pkrvars.hcl
          echo volume_size=\"${{ vars.VOLUME_SIZE }}\" >> ./packer/variables.pkrvars.hcl
          echo volume_type=\"${{ vars.VOLUME_TYPE }}\" >> ./packer/variables.pkrvars.hcl
          echo file_source=\"${{ vars.FILE_SOURCE }}\" >> ./packer/variables.pkrvars.hcl
          echo file_destination=\"${{ vars.FILE_DESTINATION }}\" >> ./packer/variables.pkrvars.hcl
          echo service_file_src=\"${{ vars.SERVICE_FILE_SRC }}\" >> ./packer/variables.pkrvars.hcl
          echo service_file_destination=\"${{ vars.SERVICE_FILE_DESTINATION }}\" >> ./packer/variables.pkrvars.hcl
          echo shell_source=\"${{ vars.SHELL_SOURCE }}\" >> ./packer/variables.pkrvars.hcl
          echo root_device_type=\"${{ vars.ROOT_DEVICE_TYPE }}\" >> ./packer/variables.pkrvars.hcl
          echo virtualization_type=\"${{ vars.VIRTUALIZATION_TYPE }}\" >> ./packer/variables.pkrvars.hcl
          cat ./packer/variables.pkrvars.hcl

      - name: Install Packer
        run: |
          pwd
          ls -la
          packer init ./packer/ami.pkr.hcl

      - name: Build AMI
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_EC2}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY_EC2}}
        run: |
          packer build --var-file=./packer/variables.pkrvars.hcl ./packer/ami.pkr.hcl
          sudo apt-get install jq
          ami_id=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d':' -f2)
          echo "AMI ID: $ami_id"
          echo "AMI_ID=$ami_id" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_DEMO_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_DEMO_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}

      - name: Update Launch Template and Trigger Instance Refresh
        run: |
          # Update Launch Template version with the latest AMI ID
          aws ec2 create-launch-template-version --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} --version-description WebVersion2 --source-version ${{vars.VERSION}} --launch-template-data '{"ImageId":"${{ env.AMI_ID }}"}'
          aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ secrets.AUTO_SCALING_GROUP_NAME }}

      - name: Wait for Instance Refresh to Complete
        run: |
          status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ secrets.AUTO_SCALING_GROUP_NAME }} --query 'InstanceRefreshes[0].Status' --output text)
          while [[ "$status" != "Successful" && "$status" != "Failed" ]]; do
            sleep 60
            status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ secrets.AUTO_SCALING_GROUP_NAME }} --query 'InstanceRefreshes[0].Status' --output text)
          done

          # Exit with an error if instance refresh failed
          if [ "$status" == "Failed" ]; then
            exit 1
          fi